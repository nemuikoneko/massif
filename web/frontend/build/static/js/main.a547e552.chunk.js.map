{"version":3,"sources":["State.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["reducer","s","a","tag","statusLog","concat","status","knownNormals","Set","normals","INITIAL_STATE","suggestedNormal","suggestedFragments","App","useReducer","state","dispatch","className","type","id","onChange","e","files","target","length","file","reader","FileReader","readAsText","onload","result","Error","text","sentences","split","fields","push","knownText","join","fetch","method","headers","body","JSON","stringify","rawResponse","ok","json","content","Object","entries","key","analyzeKnownText","onerror","size","map","entry","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAmBO,SAASA,EAAQC,EAAUC,GAChC,OAAQA,EAAEC,KACR,IAAK,aACH,OAAO,2BACFF,GADL,IAEEG,UAAWH,EAAEG,UAAUC,OAAO,CAACH,EAAEI,WAGrC,IAAK,oBACH,OAAO,2BACFL,GADL,IAEEM,aAAc,IAAIC,IAAJ,sBAAYP,EAAEM,cAAd,YAA+BL,EAAEO,cAKhD,IAAMC,EAAuB,CAClCN,UAAW,GACXG,aAAc,IAAIC,IAClBG,gBAAiB,KACjBC,mBAAoB,M,eC4CPC,MA/Ef,WAAgB,IAAD,EACaC,qBAAWd,EAASU,GADjC,mBACNK,EADM,KACCC,EADD,KAsEb,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAOC,KAAK,OAAOC,GAAG,kBAAkBC,SArBd,SAACC,GAC7B,IAAMC,EAAQD,EAAEE,OAAOD,MACvB,GAAe,OAAVA,GAAoBA,EAAME,OAAS,EAAI,CAC1C,IAAMC,EAAOH,EAAM,GAEbI,EAAS,IAAIC,WACnBD,EAAOE,WAAWH,GAClBC,EAAOG,OAAS,WACd,GAA8B,kBAAnBH,EAAOI,OAChB,MAAM,IAAIC,OAtDO,SAACC,GACxB,IAD+C,EACzCC,EAA2B,GADc,cAG5BD,EAAKE,MAAM,OAHiB,IAG/C,2BAAqC,CAAC,IAC9BC,EAD6B,QACfD,MAAM,MAC1BD,EAAUG,KAAKD,EAAO,KALuB,8BAQ/C,IAAME,EAAYJ,EAAUK,KAAK,MAGjC,sBAAC,wCAAApC,EAAA,6DACCc,EAAS,CAACb,IAAK,aAAcG,OAAQ,iBADtC,SAG2BiC,MAAM,mDAAoD,CAClFC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnB,KAAQP,MAVb,WAGOQ,EAHP,QAckBC,GAdlB,sBAeS,IAAIf,MAfb,uBAkBuBc,EAAYE,OAlBnC,OAwBC,IANMC,EAlBP,OAoBChC,EAAS,CAACb,IAAK,aAAcG,OAAQ,oBAG/BG,EAAyB,GAC/B,MAAsBwC,OAAOC,QAAQF,GAArC,eAAgD,EAAD,oBAAnCG,EAAmC,KAC7C1C,EAAQ2B,KAAKe,GAGfnC,EAAS,CAACb,IAAK,oBAAqBM,YA5BrC,2CAAD,GA6CI2C,CAAiB1B,EAAOI,SAE1BJ,EAAO2B,QAAU,iBASjB,gDAAmBtC,EAAMR,aAAa+C,QACtC,8BAAMvC,EAAMX,UAAUmD,KAAI,SAAAC,GAAK,OAAK,eAAC,IAAMC,SAAP,WAA6BD,EAAM,yBAAdA,YChEhDE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a547e552.chunk.js","sourcesContent":["export interface State {\n  readonly statusLog: ReadonlyArray<string>;\n  readonly knownNormals: Set<string>;\n  readonly suggestedNormal: string | null;\n  readonly suggestedFragments: ReadonlyArray<string> | null;\n}\n\nexport interface LogStatusAction {\n  readonly tag: 'log_status';\n  readonly status: string;\n}\n\nexport interface AddKnownNormalsAction {\n  readonly tag: 'add_known_normals';\n  readonly normals: ReadonlyArray<string>;\n}\n\ntype Action = LogStatusAction | AddKnownNormalsAction;\n\nexport function reducer(s: State, a: Action): State {\n  switch (a.tag) {\n    case 'log_status':\n      return {\n        ...s,\n        statusLog: s.statusLog.concat([a.status]),\n      };\n\n    case 'add_known_normals':\n      return {\n        ...s,\n        knownNormals: new Set([...s.knownNormals, ...a.normals]),\n      };\n  }\n}\n\nexport const INITIAL_STATE: State = {\n  statusLog: [],\n  knownNormals: new Set(),\n  suggestedNormal: null,\n  suggestedFragments: null,\n};\n","import React, {useReducer} from 'react';\nimport {reducer, INITIAL_STATE} from './State';\nimport './App.css';\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  const updateSuggestion = (): void => {\n  };\n\n  const analyzeKnownText = (text: string): void => {\n    const sentences: Array<string> = [];\n\n    for (const line of text.split('\\n')) {\n      const fields = line.split('\\t');\n      sentences.push(fields[0]);\n    }\n\n    const knownText = sentences.join('\\n');\n\n    // TODO: feed in this URL from Flask?\n    (async () => {\n      dispatch({tag: 'log_status', status: 'Analyzing...'});\n\n      const rawResponse = await fetch('http://localhost:5000/api/get_text_normal_counts', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          'text': knownText,\n        }),\n      });\n\n      if (!rawResponse.ok) {\n        throw new Error(); // TODO: handle\n      }\n\n      const content = await rawResponse.json();\n\n      dispatch({tag: 'log_status', status: 'Done analyzing.'});\n\n      // content is a map from normal to count, so we just get the normals\n      const normals: Array<string> = [];\n      for (const [key, ] of Object.entries(content)) {\n        normals.push(key);\n      }\n\n      dispatch({tag: 'add_known_normals', normals});\n\n      updateSuggestion();\n    })();\n  };\n\n  const onKnownTextFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if ((files !== null) && (files.length > 0)) {\n      const file = files[0];\n\n      const reader = new FileReader();\n      reader.readAsText(file);\n      reader.onload = () => {\n        if (typeof(reader.result) !== 'string') {\n          throw new Error();\n        }\n        analyzeKnownText(reader.result);\n      };\n      reader.onerror = () => {\n        // TODO: handle\n      };\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <input type=\"file\" id=\"known-text-file\" onChange={onKnownTextFileChange} />\n      <div>Known count: {state.knownNormals.size}</div>\n      <div>{state.statusLog.map(entry => (<React.Fragment key={entry}>{entry}<br/></React.Fragment>))}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}